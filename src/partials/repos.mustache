<section id="repos-section" class="hidden">
  <ul id="repos-list">
    <!--div class="repo-list-item-container">
      <p class="mdl-list__item-primary-content">littleonesbookhub</p>
      <div>
        <div class="mdl-spinner mdl-js-spinner is-active"></div>
        <i class="material-icons" style="display: none;">check_circle</i>
        <i class="material-icons" style="display: none;">notifications</i>
      </div>
    </div-->
  </ul>
</section>

<script type="application/javascript">
  (function REPOS_NAMESPACE() {
    
    let githubProfile = {};

    function onAuthChanged(event) {
      const auth = event.detail;
      if (auth.loggedIn === true) {
        document.getElementById('repos-section').classList.remove('hidden');
      } else {
        document.getElementById('repos-section').classList.add('hidden');
      }
    }

    function onGitHubProfileChanged(event) {
      githubProfile = event.detail;
      dispatch('github-api-call', {
        endpoint: '/user/repos',
        token: githubProfile.credential.accessToken,
      });
    }

    function onGitHubApiResponse(event) {
      const response = event.detail;
      if (response.endpoint === '/user/repos') {
        onGitHubReposFetched(response.data);
      }
    }

    function onGitHubReposFetched(repos) {
      console.log('All repos: ', repos);
      const my_repos = repos.filter(repo => repo.owner.login === githubProfile.profile.login)
      console.log('My repos:', my_repos);
      const repo_list_items_str = my_repos.map(repo => `<li data-repo-name="${repo.name}">
<div>
  <p>${repo.name}</p>
</div>
</li>`).join("");
      const repos_list = document.getElementById("repos-list");
      repos_list.innerHTML = repo_list_items_str;

      /*(function addRepoClickHandlers() {
          repo_list_items = document.getElementsByClassName("mdl-list__item");
          for (var i = 0; i < repo_list_items.length; i++) {
              repo_list_items[i].addEventListener('click', function () {
                  console.log("clicked repo: ", this.innerText);
              });
          }
      })();*/

      /*(function updateRepoHooks(repos) {
          repos.forEach(repo => {
              callGithubApi(`/repos/${repo.owner.login}/${repo.name}/hooks`, token).then(hooks => {
                  //document.querySelector(`[data-repo-name="${repo.name}"]`).innerText = `${repo.name} (${hooks.length})`;
                  console.log(hooks);
              });
          });
      })(my_repos);*/
    }
  
    function onLoad() {
      listen('auth-changed', onAuthChanged);
      listen('github-profile-changed', onGitHubProfileChanged);
      listen('github-api-response', onGitHubApiResponse);
    }
    
    entry(onLoad);
  })();
</script>