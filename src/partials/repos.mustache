<section id="repos-section" class="hidden w-full md:max-w-2xl mx-auto py-8 w-full">
  <div class="card w-full h-[80vh] max-h-[80vh] bg-base-100 shadow-xl">
    <div class="card-body h-full">
      <h2 class="card-title">Select a repository to continue</h2>
      <input id="search-repos-input" type="text" placeholder="Search repository" class="input input-bordered w-full h-12 min-h-[3rem]" />
      <div id="repos-list" class="btn-group btn-group-vertical grow overflow-y-scroll"></div>
    </div>
  </div>
</section>

<script type="application/javascript">
  (function REPOS_NAMESPACE() {
    
    let githubProfile = {};

    function onAuthChanged(event) {
      const auth = event.detail;
      if (auth.loggedIn === true) {
        document.getElementById('repos-section').classList.remove('hidden');
      } else {
        document.getElementById('repos-section').classList.add('hidden');
      }
    }

    function onGitHubProfileChanged(event) {
      githubProfile = event.detail;
      dispatch('github-api-call', {
        endpoint: '/user/repos',
        token: githubProfile.credential.accessToken,
      });
    }

    function onGitHubApiResponse(event) {
      const response = event.detail;
      if (response.endpoint === '/user/repos') {
        onGitHubReposFetched(response.data);
      }
    }

    function onGitHubReposFetched(repos) {
      console.log('All repos: ', repos);
      const my_repos = repos.filter(repo => repo.owner.login === githubProfile.profile.login)
      console.log('My repos:', my_repos);
      const repo_list_items_str = my_repos.map(repo => `<button data-repo-name="${repo.name}" class="btn repo-btn">
  ${repo.name}
</button>`).join("\n");
      const repos_list = document.getElementById("repos-list");
      repos_list.innerHTML = repo_list_items_str;

      /*(function addRepoClickHandlers() {
          repo_list_items = document.getElementsByClassName("mdl-list__item");
          for (var i = 0; i < repo_list_items.length; i++) {
              repo_list_items[i].addEventListener('click', function () {
                  console.log("clicked repo: ", this.innerText);
              });
          }
      })();*/

      /*(function updateRepoHooks(repos) {
          repos.forEach(repo => {
              callGithubApi(`/repos/${repo.owner.login}/${repo.name}/hooks`, token).then(hooks => {
                  //document.querySelector(`[data-repo-name="${repo.name}"]`).innerText = `${repo.name} (${hooks.length})`;
                  console.log(hooks);
              });
          });
      })(my_repos);*/
    }

    function onSearchInputChange(event) {
      const filter = this.value;

      document.querySelectorAll('.repo-btn').forEach(repo_btn => {
        if (!filter || repo_btn.innerText.toLowerCase().indexOf(filter.toLowerCase()) !== -1) {
          repo_btn.classList.remove('hidden');
        } else {
          repo_btn.classList.add('hidden');
        }
      });
    }
  
    function onLoad() {
      listen('auth-changed', onAuthChanged);
      listen('github-profile-changed', onGitHubProfileChanged);
      listen('github-api-response', onGitHubApiResponse);
      document.getElementById('search-repos-input').addEventListener('keyup', onSearchInputChange);
    }
    
    entry(onLoad);
  })();
</script>