<main>
  {{> hero}}
  {{> repos}}
</main>

<script type="application/javascript">
  (function MAIN_NAMESPACE() {

    const model = {
    };

    function update(key, value) {
      model[key] = value;
      return dispatch(`${key}-changed`, value);
    }

    function getDocRef(key) {
      let ref = null;
      if (typeof key === "string") {
        key = key.split(".");
      }
      for (let i = 0; i < key.length; i++) {
        if (i === 0) {
          ref = firebase.firestore().collection(key[i]);
        } else if (i % 2 === 1) {
          ref = ref.doc(key[i]);
        } else {
          ref = ref.collection(key[i]);
        }
      }
      return ref;
    }

    function storeAndUpdateModel(dbKey, modelKey, data) {
      return getDocRef(dbKey).set(data).then(() => update(modelKey, data));
    }

    function fetchAndUpdateModel(dbKey, modelKey) {
      return getDocRef(dbKey).get()
        .then(snapshot => snapshot.data())
        .then(data => update(modelKey, data));
    }

    function onCallGithubApi(event) {
      const request = event.detail;
      return fetch(`https://api.github.com${request.endpoint}`, {
        headers: {
            Accept: "application/vnd.github+json",
            Authorization: `token ${request.token}`,
        }
      })
        .then(response => response.json())
        .then(data => dispatch('github-api-response', { endpoint: request.endpoint, data: data }));
    }

    function onSignInDone(result) {
      const p = [];
      if (result.additionalUserInfo.isNewUser) {
        const profile = {
            name: user.displayName,
            email: user.email,
            photo: user.photoURL,
        };
        p.push(storeAndUpdateModel(`users.${result.uid}`, 'user-profile', profile));
      }
      if (result.credential.providerId === "github.com") {
        const profile = {
            profile: result.additionalUserInfo.profile,
            credential: {
                accessToken: result.credential.accessToken,
                pendingToken: result.credential.pendingToken,
                providerId: result.credential.providerId,
                signInMethod: result.credential.signInMethod,
            },
        }
        p.push(storeAndUpdateModel(`users.${result.uid}.providers.github`, 'github-profile', profile));
      }
      return Promise.all(p);
    }

    function onSignin() {
      var provider = new firebase.auth.GithubAuthProvider();
      provider.addScope('repo');
      provider.addScope('admin:repo_hook');
      
      // uncomment to show the auth permission page (even when signed in)
      //provider.setCustomParameters({
      //  'login': ''
      //});

      firebase.auth().signInWithPopup(provider).then(async function (result) {
          onSignInDone(result);
      }).catch(function (error) {
          var errorCode = error.code;
          if (errorCode === 'auth/account-exists-with-different-credential') {
              alert('You have already signed up with a different auth provider for that email.');
          } else {
              console.error(error);
          }
      });
    }

    function onRepoListItemClicked(event) {
    }

    function onLogout() {
      firebase.auth().signOut();
    }

    function initApp() {
        firebase.auth().onAuthStateChanged(function (user) {
            if (user) {
                update('auth', { loggedIn: true, loading: true, user: user });
                fetchAndUpdateModel(`users.${user.uid}`, 'user-profile');
                fetchAndUpdateModel(`users.${user.uid}.providers.github`, 'github-profile');
            } else {
                update('auth', { loggedIn: false, loading: false });
            }
        });

        listen('signin', onSignin)
        listen('logout', onLogout)
        listen('github-api-call', onCallGithubApi);
    }

    window.onload = function () {
        module_callbacks.forEach(callback => callback());
        initApp();
    };
  })();
</script>