{{> hero-login}}
{{> legacy}}

<script type="application/javascript" defer>
  (function MAIN_NAMESPACE() {

    const model = {
    };

    function updateModel(newModel) {
      Object.assign(model, newModel);
      dispatch('model-updated', model);
    }

    function getUserDoc(userUid) {
        return firebase.firestore().collection("users").doc(userUid);
    }
    function getGitHubDoc(userUid) {
        return getUserDoc(userUid).collection("providers").doc("github");
    }
    function callGithubApi(endpoint, accessToken) {
        return fetch(`https://api.github.com${endpoint}`, {
            headers: {
                Accept: "application/vnd.github+json",
                Authorization: `token ${accessToken}`,
            }
        }).then(response => response.json());
    }

    function loadGitHubModel(userUid) {
        return getGitHubDoc(userUid).get().then(snapshot => {
            if (snapshot.exists) {
                const data = snapshot.data();
                updateModel({ github: data });
                return model;
            }
            return null;
        }).then(model => onGitHubModelLoaded(model));
    }

    function onSignedIn(result) {
      const p = [getUserDoc(result.user.uid).set({
          name: result.user.displayName,
          email: result.user.email,
          photo: result.user.photoURL,
      }), getGitHubDoc(result.user.uid).set({
          profile: result.additionalUserInfo.profile,
          credential: {
              accessToken: result.credential.accessToken,
              pendingToken: result.credential.pendingToken,
              providerId: result.credential.providerId,
              signInMethod: result.credential.signInMethod,
          },
      })];
      Promise.all(p).then(() => {
          loadGitHubModel(result.user.uid);
      });
    }

    function onSignin() {
      var provider = new firebase.auth.GithubAuthProvider();
      provider.addScope('repo');
      provider.addScope('admin:repo_hook');
      
      // uncomment to show the auth permission page (even when signed in)
      //provider.setCustomParameters({
      //  'login': ''
      //});

      firebase.auth().signInWithPopup(provider).then(async function (result) {
          onSignedIn(result);
      }).catch(function (error) {
          var errorCode = error.code;
          if (errorCode === 'auth/account-exists-with-different-credential') {
              alert('You have already signed up with a different auth provider for that email.');
          } else {
              console.error(error);
          }
      });
    }

    function onRepoListItemClicked(event) {
    }

    function onGitHubModelLoaded(model) {
        console.log("MODEL: ", model);
        const token = model.github.credential.accessToken;
        const my_github_user_name = model.github.profile.login;

        callGithubApi("/user/repos", token).then(repos => {
            console.log('All repos: ', repos);
            const my_repos = repos.filter(repo => repo.owner.login === my_github_user_name)
            console.log('My repos:', my_repos);
            const repo_list_items_str = my_repos.map(repo => `<li class="mdl-list__item" data-repo-name="${repo.name}">
    <div class="repo-list-item-container">
    <p class="mdl-list__item-primary-content">${repo.name}</p>
    <div>
    <div class="mdl-spinner mdl-js-spinner is-active"></div>
    <i class="material-icons" style="display: none;">check_circle</i>
    <i class="material-icons" style="display: none;">notifications</i>
    </div>
    </div>
    </li>`).join("");
            const repos_list = document.getElementById("repos-list");
            repos_list.innerHTML = repo_list_items_str;

            (function addRepoClickHandlers() {
                repo_list_items = document.getElementsByClassName("mdl-list__item");
                for (var i = 0; i < repo_list_items.length; i++) {
                    repo_list_items[i].addEventListener('click', function () {
                        console.log("clicked repo: ", this.innerText);
                    });
                }
            })();

            /*(function updateRepoHooks(repos) {
                repos.forEach(repo => {
                    callGithubApi(`/repos/${repo.owner.login}/${repo.name}/hooks`, token).then(hooks => {
                        //document.querySelector(`[data-repo-name="${repo.name}"]`).innerText = `${repo.name} (${hooks.length})`;
                        console.log(hooks);
                    });
                });
            })(my_repos);*/
        });
    }

    function onLogout() {
      firebase.auth().signOut();
    }

    function initApp() {
        firebase.auth().onAuthStateChanged(function (user) {
            if (user) {
                updateModel({ loggedIn: true, loading: true, user: user });
                loadGitHubModel(user.uid);
            } else {
                updateModel({ loggedIn: false, loading: false });
            }
        });

        subscribe('signin', onSignin)
        subscribe('logout', onLogout)
    }

    window.onload = function () {
        module_callbacks.forEach(callback => callback());
        initApp();
    };
  })();
</script>